{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3290d03c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import os\n",
    "import docx\n",
    "import PyPDF2\n",
    "\n",
    "def read_docx(file_path):\n",
    "    doc = docx.Document(file_path)\n",
    "    return \" \".join([para.text for para in doc.paragraphs])\n",
    "\n",
    "def read_pdf(file_path):\n",
    "    pdf_file = open(file_path, 'rb')\n",
    "    pdf_reader = PyPDF2.PdfFileReader(pdf_file)\n",
    "    num_pages = pdf_reader.numPages\n",
    "    text = \"\"\n",
    "    for page in range(num_pages):\n",
    "        text += pdf_reader.getPage(page).extractText()\n",
    "    pdf_file.close()\n",
    "    return text\n",
    "\n",
    "def split_text(text, length=1300, overlap=500):\n",
    "    splits = []\n",
    "    start = 0\n",
    "    while start < len(text):\n",
    "        splits.append(text[start:start+length])\n",
    "        start += (length - overlap)\n",
    "    return splits\n",
    "\n",
    "def process_files(directory):\n",
    "    data = {'序号': [], '文件名': [], '切割序号': [], '切割内容': []}\n",
    "    idx = 1\n",
    "\n",
    "    for root, _, files in os.walk(directory):\n",
    "        for file in files:\n",
    "            file_path = os.path.join(root, file)\n",
    "            text = \"\"\n",
    "            if file_path.endswith(\".docx\"):\n",
    "                text = read_docx(file_path)\n",
    "            elif file_path.endswith(\".pdf\"):\n",
    "                text = read_pdf(file_path)\n",
    "            elif file_path.endswith(\".txt\"):\n",
    "                with open(file_path, \"r\", encoding=\"utf-8\") as f:\n",
    "                    text = f.read()\n",
    "            elif file_path.endswith(\".xlsx\") or file_path.endswith(\".csv\"):\n",
    "                continue  # skip excel and csv files for now\n",
    "            else:\n",
    "                continue  # skip other file formats\n",
    "\n",
    "            splits = split_text(text)\n",
    "            for i, split in enumerate(splits):\n",
    "                data['序号'].append(idx)\n",
    "                data['文件名'].append(file)\n",
    "                data['切割序号'].append(i+1)\n",
    "                data['切割内容'].append(split)\n",
    "                idx += 1\n",
    "\n",
    "    return pd.DataFrame(data)\n",
    "\n",
    "def main():\n",
    "    st.title(\"文件处理器\")\n",
    "\n",
    "    uploaded_files = st.file_uploader(\"上传文件\", accept_multiple_files=True)\n",
    "    directory = st.text_input(\"设置保存路径：\", \"/Users/zhangning/Desktop/HKSTP_DIRE/DATA\")\n",
    "\n",
    "    if st.button(\"开始处理\"):\n",
    "        for uploaded_file in uploaded_files:\n",
    "            with open(os.path.join(directory, uploaded_file.name), \"wb\") as f:\n",
    "                f.write(uploaded_file.getvalue())\n",
    "\n",
    "        df = process_files(directory)\n",
    "        st.write(df)\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
